#include <avr/io.h>
#include <avr/interrupt.h>



int front,back,left,right;
int senf, senb,senl, senr;
int main(void)
{
	
	
	ADCSRA |= 1<<ADPS2; //enabling prescaler
	ADMUX |= 1<<ADLAR;  //enabling 8-bit
	ADCSRA |= 1<<ADIE;  //enabling interupts
	ADMUX |= 1<<REFS0;  //max reference voltage
	ADCSRA |= 1<<ADEN; //turning on adc future
	sei();
	ADCSRA |= 1<<ADSC; //adc start conversion
	DDRD |= 0xFF;
	TCCR1A |= 1<<COM1A0 | 1<<COM1A1| 1<<COM1B0 | 1<<COM1B1 | 1<<WGM11;
	TCCR1B |= 1<<CS10  | 1<<WGM13 | 1<<WGM12;
	OCR1B = 2000;
	DDRB|= 0b00001111;
	while(1)
	{
			}

}

ISR(ADC_vect)
{
	volatile uint8_t sensor= ADCH;
	
	switch(ADMUX)
	{
		case 0x60:
		front=sensor;
		senf=front;
		ADMUX = 0x61;
		break;
		
		case 0x61:
		left=sensor;
		senl=left;
		ADMUX = 0x62;
		break;
		
		case 0x62:
		right=sensor;
		senr=right;
		ADMUX = 0x63;
		break;

		case 0x63:
		back=sensor;
		senb=back;
		ADMUX = 0x60;
		break;
		
		
		default:
		break;
	}
	

if(senf>senb)
{
	if(senf>senr)
	{
		
		if(senf>senl)
		{
			//senf is highest
			PORTB |= 1<<PINB0 |1<<PINB2;
			PORTB &= ~(1<<PINB1);
			PORTB &= ~(1<<PINB3);
		}
		else
		{
			//senl is highest
			PORTB |= 1<<PINB2;
			PORTB &= ~(1<<PINB1);
			PORTB &= ~(1<<PINB0);
			PORTB &= ~(1<<PINB3);
		}
	}
	
	else
	{
		if(senr>senl)
		{
			//senr is highest
			PORTB |= 1<<PINB0;
			PORTB &= ~(1<<PINB1);
			PORTB &= ~(1<<PINB2);
			PORTB &= ~(1<<PINB3);
		}
		else
		{
			PORTB |= 1<<PINB2;
			PORTB &= ~(1<<PINB1);
			PORTB &= ~(1<<PINB0);
			PORTB &= ~(1<<PINB3);	//senl is highest
		}

	}
	
	
}

else
{
	if(senb>senr)
	{
		if(senb>senl)
		{
			//senb is highest
			PORTB |= 1<<PINB1 |1<<PINB3;
			PORTB &= ~(1<<PINB0);
			PORTB &= ~(1<<PINB2);
			
		}
		else
		{
			//senl is highest
			PORTB |= 1<<PINB2;
			PORTB &= ~(1<<PINB1);
			PORTB &= ~(1<<PINB0);
			PORTB &= ~(1<<PINB3);
		}
	}
	
	else
	{
		if(senr>senl)
		{
			//senr is highest
			PORTB |= 1<<PINB0;
			PORTB &= ~(1<<PINB1);
			PORTB &= ~(1<<PINB2);
			PORTB &= ~(1<<PINB3);
		}
		else
		{
			//senl is highest
			PORTB |= 1<<PINB2;
			PORTB &= ~(1<<PINB1);
			PORTB &= ~(1<<PINB0);
			PORTB &= ~(1<<PINB3);
		}
	}
	
}
ADCSRA |= 1<<ADSC;
}
